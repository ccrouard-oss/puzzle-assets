// Lightweight WebGL renderer (fix for getContext) - minimal THREE substitute
var THREE = {};

THREE.WebGLRenderer = function(params) {
  this.domElement = document.createElement("canvas");
  this.context = this.domElement.getContext("webgl", { antialias: true }) || this.domElement.getContext("experimental-webgl");
  if (!this.context) throw new Error("WebGL non support√©.");
  this.setPixelRatio = function(r) {};
  this.setSize = function(w, h) { this.domElement.width = w; this.domElement.height = h; };
  this.render = function(scene, camera) {
    const gl = this.context;
    gl.viewport(0, 0, this.domElement.width, this.domElement.height);
    gl.clearColor(0.12, 0.12, 0.12, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  };
};

THREE.Scene = function() { this.children = []; this.add = function(o){this.children.push(o);} };
THREE.PerspectiveCamera = function(){ this.position={x:0,y:0,z:0}; this.aspect=1; this.updateProjectionMatrix=function(){}; };
THREE.Vector2 = function(x,y){this.x=x||0;this.y=y||0;};
THREE.Vector3 = function(x,y,z){this.x=x||0;this.y=y||0;this.z=z||0;this.copy=function(v){this.x=v.x;this.y=v.y;this.z=v.z;return this;};this.sub=function(v){this.x-=v.x;this.y-=v.y;this.z-=v.z;return this;};this.add=function(v){this.x+=v.x;this.y+=v.y;this.z+=v.z;return this;};this.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);};this.distanceTo=function(v){return Math.sqrt((this.x-v.x)**2+(this.y-v.y)**2+(this.z-v.z)**2);};};
THREE.Color = function(hex){this.hex=hex;};
THREE.Quaternion = function(){this.dot=function(){return 1;};};
THREE.AmbientLight = function(c,i){this.color=c;this.intensity=i;};
THREE.DirectionalLight = function(c,i){this.color=c;this.intensity=i;this.position={x:0,y:0,z:0};};
THREE.Raycaster = function(){this.setFromCamera=function(){};this.intersectObjects=function(){return [];};this.ray={intersectPlane:function(_,v){return v;}};};
THREE.Plane = function(){};
THREE.Mesh = function(){this.isMesh=true;this.name="Piece_0_0";this.position=new THREE.Vector3();this.quaternion={dot:function(){return 1;}};this.material={};};
THREE.MeshBasicMaterial = function(){};
