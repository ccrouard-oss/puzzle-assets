// Three.js ultra-light mock (Mobirise-safe version)
// Always uses its own <canvas> for WebGL context

var THREE = {};

THREE.WebGLRenderer = function (params) {
  // ignore params entirely
  this.domElement = document.createElement("canvas");
  const canvas = this.domElement;
  if (!canvas || !canvas.getContext) {
    console.error("❌ Impossible de créer un canvas HTML5.");
    return;
  }
  this.context =
    canvas.getContext("webgl", { antialias: true }) ||
    canvas.getContext("experimental-webgl");
  if (!this.context) {
    console.warn("⚠️ WebGL non disponible. Aucun rendu possible.");
  }

  this.setPixelRatio = function (r) {};
  this.setSize = function (w, h) {
    canvas.width = w;
    canvas.height = h;
  };
  this.render = function (scene, camera) {
    const gl = this.context;
    if (!gl) return;
    gl.viewport(0, 0, canvas.width, canvas.height);
    gl.clearColor(0.12, 0.12, 0.12, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  };
};

THREE.Scene = function () {
  this.children = [];
  this.add = (obj) => this.children.push(obj);
};
THREE.PerspectiveCamera = function () {
  this.position = { x: 0, y: 0, z: 0 };
  this.aspect = 1;
  this.updateProjectionMatrix = function () {};
};
THREE.Vector2 = function (x, y) {
  this.x = x || 0;
  this.y = y || 0;
};
THREE.Vector3 = function (x, y, z) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
  this.copy = (v) => ((this.x = v.x), (this.y = v.y), (this.z = v.z), this);
  this.sub = (v) => ((this.x -= v.x), (this.y -= v.y), (this.z -= v.z), this);
  this.add = (v) => ((this.x += v.x), (this.y += v.y), (this.z += v.z), this);
  this.length = () =>
    Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  this.distanceTo = (v) =>
    Math.sqrt(
      (this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2
    );
};
THREE.Color = function (hex) {
  this.hex = hex;
};
THREE.Quaternion = function () {
  this.dot = function () {
    return 1;
  };
};
THREE.AmbientLight = function (c, i) {
  this.color = c;
  this.intensity = i;
};
THREE.DirectionalLight = function (c, i) {
  this.color = c;
  this.intensity = i;
  this.position = { x: 0, y: 0, z: 0 };
};
THREE.Raycaster = function () {
  this.setFromCamera = function () {};
  this.intersectObjects = function () {
    return [];
  };
  this.ray = {
    intersectPlane: function (_, v) {
      return v;
    },
  };
};
THREE.Plane = function () {};
THREE.Mesh = function () {
  this.isMesh = true;
  this.name = "Piece_0_0";
  this.position = new THREE.Vector3();
  this.quaternion = { dot: () => 1 };
  this.material = {};
};
THREE.MeshBasicMaterial = function () {};
Force canvas creation (fix getContext Mobirise)
